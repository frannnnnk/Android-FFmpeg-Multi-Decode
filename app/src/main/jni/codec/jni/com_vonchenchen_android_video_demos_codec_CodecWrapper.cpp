/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
/* Header for class com_vonchenchen_android_video_demos_codec_CodecWrapper */

#include "../decoder.h"
#include "../yuv_2_rgb.h"

#include <opencv2/opencv.hpp>

//extern "C" {
#include <android/bitmap.h>
#include <android/native_window.h>
#include <android/native_window_jni.h>
//}

#ifndef _Included_com_vonchenchen_android_video_demos_codec_CodecWrapper
#define _Included_com_vonchenchen_android_video_demos_codec_CodecWrapper
#ifdef __cplusplus
extern "C" {
#endif

//enum AVPixelFormat pixelFormat = AV_PIX_FMT_BGR24;
enum AVPixelFormat pixelFormat = AV_PIX_FMT_RGB565LE;

typedef struct _EnvPackage{
    JNIEnv *env;
    jobject *obj;
    jobject *surface;
} EnvPackage;

/*
 * Class:     com_vonchenchen_android_video_demos_codec_CodecWrapper
 * Method:    get_codec
 * Signature: ()I
 */
JNIEXPORT long JNICALL Java_com_vonchenchen_android_1video_1demos_codec_CodecWrapper_get_1codec
        (JNIEnv *env, jobject obj){
    decoder *p = new decoder();
    p->initialize(pixelFormat);
    return p;
}

//#define VIDEOWIDTH 1280
//#define VIDEOHEIGHT 300
#define VIDEOWIDTH 480
#define VIDEOHEIGHT 272
int const IMG_FRAME_SIZE = VIDEOWIDTH * VIDEOHEIGHT * 3;

const short RGB565_MASK_RED = (0x1F)<<11;
const short RGB565_MASK_GREEN = (0x3F)<<5;
const short RGB565_MASK_BLUE = (0x1F);
void rgb5652bgr888(short *src, char *dest, int size){
    for(int i = 0; i<  size; i++){
        unsigned short RGB16 = *src;
        dest[i*3+2] = (RGB16&RGB565_MASK_RED) >> 11;
        dest[i*3+1] = (RGB16&RGB565_MASK_GREEN) >> 5;
        dest[i*3+0] = (RGB16&RGB565_MASK_BLUE);
        dest[i*3+2] <<= 3;
        dest[i*3+1] <<= 2;
        dest[i*3+0] <<= 3;
        src++;
    }
}

void save_rgb_image(AVFrame *pFrame){

    static int flag = 0;
    flag++;
    if(flag == 40) {
        LOGE("save_rgb_image saving ...");
        flag ++;

        //save rgb565
        char *dest = (char *)malloc(VIDEOWIDTH * VIDEOHEIGHT * 3);
        rgb5652bgr888((short *)pFrame->data[0], dest, VIDEOWIDTH * VIDEOHEIGHT);
        IplImage *iplImagePre = cvCreateImage(cvSize(VIDEOWIDTH, VIDEOHEIGHT), 8, 3);
        memcpy(iplImagePre->imageData, dest, VIDEOWIDTH * VIDEOHEIGHT * 3);
        cvSaveImage("/storage/emulated/0/android_video_demo/image.jpeg", iplImagePre);

        //save rgb24
        /*IplImage *iplImagePre = cvCreateImage(cvSize(VIDEOWIDTH, VIDEOHEIGHT), 8, 3);
        memcpy(iplImagePre->imageData, pFrame->data[0], IMG_FRAME_SIZE);
        cvSaveImage("/storage/emulated/0/android_video_demo/image.jpeg", iplImagePre);*/

        LOGE("save_rgb_image saved ...");
    }
}

void handle_data(AVFrame *pFrame, void *param, void *ctx){

    RenderParam *renderParam = (RenderParam *)param;

    AVFrame	*rgbFrame = yuv420p_2_argb(pFrame, renderParam->swsContext, renderParam->avCodecContext, pixelFormat);//AV_PIX_FMT_RGB565LE

    LOGE("width %d height %d",rgbFrame->width, rgbFrame->height);

    //for test decode image
    //save_rgb_image(rgbFrame);

    EnvPackage *envPackage = (EnvPackage *)ctx;

    ANativeWindow_Buffer nwBuffer;
    ANativeWindow *aNativeWindow = ANativeWindow_fromSurface(envPackage->env, *(envPackage->surface));
    if (aNativeWindow == NULL) {
        LOGE("ANativeWindow_fromSurface error");
        return;
    }

    //scaled buffer to fit window
    int retval = ANativeWindow_setBuffersGeometry(aNativeWindow, rgbFrame->width, rgbFrame->height,  WINDOW_FORMAT_RGB_565);

    if (0 != ANativeWindow_lock(aNativeWindow, &nwBuffer, 0)) {
        LOGE("ANativeWindow_lock error");
        return;
    }

    if (nwBuffer.format == WINDOW_FORMAT_RGB_565) {
        memcpy((__uint16_t *) nwBuffer.bits, (__uint16_t *)rgbFrame->data[0], rgbFrame->width * rgbFrame->height *2);
    }

//    jclass clazz = envPackage->env->GetObjectClass(*(envPackage->obj));
//    //jmethodID callbackMethodID = envPackage->env->GetMethodID(clazz, "onFrameDecode", "([BII)V");
//    jmethodID callbackMethodID = envPackage->env->GetMethodID(clazz, "onFrameDecode", "([III)V");
//    LOGE("rgbFrame->data %d %d %d %d %d", rgbFrame->data[0][0], rgbFrame->data[0][1], rgbFrame->data[0][2], rgbFrame->data[0][3], rgbFrame->data[0][4]);
//    jint *ptr = (jint *)(&rgbFrame->data[0][0]);
//    LOGE("rgbFrame->data ptr %d %d %d %d %d", (unsigned int)ptr[0], (unsigned int)ptr[1], (unsigned int)ptr[2], (unsigned int)ptr[3], (unsigned int)ptr[4]);
//    jintArray ret = envPackage->env->NewIntArray(pFrame->width * pFrame->height);
//    envPackage->env->SetIntArrayRegion(ret, 0, rgbFrame->width*rgbFrame->height, ptr);
//    //LOGE("rgbFrame->data %d %d %d", p_ret[0], p_ret[1], p_ret[2]);
//    LOGE("rgbFrame->data1 %d %d %d %d %d %d %d", ret[0], ret[1], ret[2], ret[3], ret[4], ret[5], ret[6]);
//    envPackage->env->CallVoidMethod(*(envPackage->obj), callbackMethodID, ret, pFrame->width, pFrame->height);

    if(0 !=ANativeWindow_unlockAndPost(aNativeWindow)){
        LOGE("ANativeWindow_unlockAndPost error");
        return;
    }
    ANativeWindow_release(aNativeWindow);

    av_free(rgbFrame->data[0]);
    av_free(rgbFrame);
}

/*
 * Class:     com_vonchenchen_android_video_demos_codec_CodecWrapper
 * Method:    decode_stream
 * Signature: ([BII)V
 */
JNIEXPORT void JNICALL Java_com_vonchenchen_android_1video_1demos_codec_CodecWrapper_decode_1stream
        //(JNIEnv *env, jobject obj, jbyteArray jdata, jint length, decoder *this_obj, jobject surface){
        (JNIEnv *env, jobject obj, jbyteArray jdata, jint length, jlong this_obj_long, jobject surface){

    //int this_obj_real = (int)this_obj_long;
//    long this_obj_real = this_obj_long;
    decoder *this_obj = this_obj_long;

    jbyte *cdata = env->GetByteArrayElements(jdata, JNI_FALSE);
    jbyte *cdata_rec = cdata;

    if(cdata != NULL) {
        EnvPackage package;
        package.env = env;
        package.obj = &obj;
        package.surface = &surface;

        int len = 0;
        while (1) {
            if (length > INBUF_SIZE) {
                len = INBUF_SIZE;
                length -= INBUF_SIZE;
            } else if (length > 0 && length <= INBUF_SIZE) {
                len = length;
                length = 0;
            } else {
                break;
            }
            //decode h264 cdata to yuv and save yuv data to avFrame which would be passed to handle_data
            this_obj->decodeFrame(cdata, len, handle_data, &package);
            cdata = cdata + len;
            LOGE("decode length: %d ", len);
            //this_obj->decodeFrame(cdata, length, handle_data, NULL);
        }

    }else{
        LOGE("stream data is NULL");
    }
    env->ReleaseByteArrayElements(jdata, cdata_rec, 0);
}

/*
 * Class:     com_vonchenchen_android_video_demos_codec_CodecWrapper
 * Method:    release_codec
 * Signature: (I)V
 */
JNIEXPORT void JNICALL Java_com_vonchenchen_android_1video_1demos_codec_CodecWrapper_release_1codec
        (JNIEnv *env, jobject obj, long this_obj_long){

    decoder *this_obj = this_obj_long;

    this_obj->close();
    delete this_obj;
}
#ifdef __cplusplus
}
#endif
#endif
